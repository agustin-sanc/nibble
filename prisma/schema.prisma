generator client {
  provider = "prisma-client-js"
  seed     = "seed.ts"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Course {
  id          String @id @default(cuid())
  name        String
  description String

  ownerId    String
  studentIds String[]

  theories  Theory[]
  practices Practice[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Theory {
  id          String @id @default(cuid())
  name        String
  description String
  content     String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  practices Practice[] @relation("TheoryToPractice")

  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId String

  @@index([name])
}

model Practice {
  id          String @id @default(cuid())
  name        String
  description String

  exercises Exercise[]
  theories  Theory[]   @relation("TheoryToPractice")

  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([name])
}

model Exercise {
  id          String   @id @default(cuid())
  name        String
  description String
  tags        Tag[]    @relation("ExerciseToTag")
  solvedBy    String[]

  blackBoxTests BlackBoxTest[]
  grayBoxTests  GrayBoxTest[]
  whiteBoxTests WhiteBoxTest[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  practice   Practice @relation(fields: [practiceId], references: [id], onDelete: Cascade)
  practiceId String

  @@index([name])
}

model Tag {
  id        String     @id @default(cuid())
  name      String     @unique
  exercises Exercise[] @relation("ExerciseToTag")

  @@index([name])
}

model BlackBoxTest {
  id          String  @id @default(cuid())
  isExample   Boolean @default(false)
  description String?

  batchInput  String[]
  batchOutput String[]

  exercise   Exercise @relation(fields: [exerciseId], references: [id], onDelete: Cascade)
  exerciseId String
}

model GrayBoxTest {
  id          String  @id @default(cuid())
  isExample   Boolean @default(false)
  description String?

  functionName     String
  functionArgs     FunctionArgument[]

  functionResponse   FunctionResponse @relation(fields: [functionResponseId], references: [id], onDelete: Cascade)
  functionResponseId String @unique

  exercise   Exercise @relation(fields: [exerciseId], references: [id], onDelete: Cascade)
  exerciseId String
}

model FunctionArgument {
  id    String           @id @default(cuid())
  value String
  type  FunctionArgType

  grayBoxTest   GrayBoxTest @relation(fields: [grayBoxTestId], references: [id], onDelete: Cascade)
  grayBoxTestId String

  @@index([grayBoxTestId])
}

model FunctionResponse {
  id    String           @id @default(cuid())
  value String
  type  FunctionArgType

  grayBoxTest GrayBoxTest?
}

enum FunctionArgType {
  STRING
  NUMBER
  BOOLEAN
  ARRAY
}

model WhiteBoxTest {
  id          String  @id @default(cuid())
  isExample   Boolean @default(false)
  description String?

  test String

  exercise   Exercise @relation(fields: [exerciseId], references: [id], onDelete: Cascade)
  exerciseId String
}
